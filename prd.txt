
1. Overview
1.1 Purpose
careAI is a web application that allows users to interact with a powerful LLM to manage their medical data, track health metrics, set goals, and maintain conversation history—all while ensuring sensitive patient data remains client-side.

1.2 Key Features
Patient Profile Database (Client-side): Stores medical records, checklists, appointments, recommendations, medications, sleep data, and sleep quality.

Conversation History Database (Client-side): Stores AI-user interactions with timestamps, tags, and full message history.

User Authentication & Metadata (Server-side): Stores only essential user account info (no medical data).

LLM Integration: Processes natural language inputs to update client-side databases automatically (e.g., "I slept 7 hours" → updates sleep log).

2. System Architecture
2.1 High-Level Diagram
text
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐  
│   Client-Side   │     │   Server-Side   │     │   LLM Service   │  
│                 │     │                 │     │                 │  
│ - Patient DB    │ ◄───┤ - User Auth DB  │ ───► │ (Hosted LLM)   │  
│ - Conversation  │     │ (No medical     │     │                 │  
│   History DB    │     │  data stored)   │     └─────────────────┘  
└─────────────────┘     └─────────────────┘  
2.2 Data Flow
User Input → Sent to server → Forwarded to LLM.

LLM Response → Parsed for actions (e.g., update sleep hours) → Sent back to client.
LLM:
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "https://mac.futureos.xyz/") # Using model from SLab
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "llama3.3:70b")


Client-Side DBs → Updated based on LLM’s structured response.

3. Detailed Requirements
3.1 Client-Side Components
3.1.1 Patient Profile Database (IndexedDB or similar)
Field	Type	Description
medical_records	JSON	Lab results, diagnoses, etc.
checklists	Array	Daily goals (e.g., "10,000 steps")
appointments	Array	Date, doctor, notes
medications	Array	Drug name, dosage, schedule
sleep_hours	Number	Last recorded sleep duration
sleep_quality	Number (1-5)	User-rated sleep quality
3.1.2 Conversation History Database
Field	Type	Description
timestamp	DateTime	When the convo happened
tags	Array	e.g., #sleep, #medication
messages	Array	{sender: "user"|"AI", text: string}
3.2 Server-Side Components
3.2.1 User Database (PostgreSQL/MongoDB)
Field	Type	Description
userID	UUID	Unique identifier
first_name	String	User’s first name
last_name	String	User’s last name
email	String	Login credential
account_creation	DateTime	When user signed up
last_active	DateTime	Last login timestamp
3.2.2 LLM Integration
Input: User’s raw text (e.g., "I slept 7 hours last night").

Output: Structured JSON (e.g., {action: "update_sleep", hours: 7}).

Privacy: LLM processes but never stores medical data.

3.3 Key Interactions
Example 1: Updating Sleep Data
User says: "I slept 7 hours, quality 4/5."

LLM responds: {action: "update_sleep", hours: 7, quality: 4}

Client updates: Patient Profile DB.

Example 2: Adding a Checklist Item
User says: "Remind me to walk 10,000 steps daily."

LLM responds: {action: "add_checklist", task: "Walk 10,000 steps", recurrence: "daily"}

Client updates: Checklists array in Patient Profile DB.

